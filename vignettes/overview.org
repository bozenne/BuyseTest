#+TITLE: Overview of the package BuyseTest
#+Author: Brice Ozenne
#+LaTeX_HEADER: %\VignetteIndexEntry{overview}
#+LaTeX_HEADER: %\VignetteEngine{R.rsp::tex}
#+LaTeX_HEADER: %\VignetteKeyword{R}
#+BEGIN_SRC R :exports none :results output :session *R* :cache no
options(width = 90)
#+END_SRC

#+RESULTS:

The *BuyseTest* package contains five functions that are relevant for the user:
- the =BuyseTest= function to compute the net benefit/win ratio. It is
  the main function of the package.
- a =summary= function to display the results computed by the =BuyseTest= function.
- a =confint= function to extract estimates, confidence intervals, and p.values.
- the =getPairScore= method to extract the contribution of each pair to the net benefit/win ratio.
- the =BuyseTest.options= function the contain the default values for
  the argument of the =BuyseTest= function. These default values can
  be changed to better match the user needs.

Two additional function are presented in this document: =simBuyseTest=
that can be used to quickly simulate data and =getSurvival= that is
useful to reproduce the results output by =BuyseTest=.

\vfill

Before going further we need to load the *BuyseTest* package in the R
session:
#+BEGIN_SRC R  :results silent   :exports code  :session *R* :cache no
library(BuyseTest)
#+END_SRC

\bigskip

The *BuyseTest* package is under active development. Newer package
versions may include additional functionalities and fix previous
bugs. To get the current version of the package use
=utils::packageVersion=:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
utils::packageVersion("BuyseTest")
#+END_SRC

#+RESULTS:
: [1] '1.6.2'

\vfill


\clearpage

* Example data
For this overview we will used the =veteran= dataset from the
*survival* package:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
data(veteran,package="survival")
head(veteran)
#+END_SRC

#+RESULTS:
:   trt celltype time status karno diagtime age prior
: 1   1 squamous   72      1    60        7  69     0
: 2   1 squamous  411      1    70        5  64    10
: 3   1 squamous  228      1    60        3  38     0
: 4   1 squamous  126      1    60        9  63    10
: 5   1 squamous  118      1    70       11  65    10
: 6   1 squamous   10      1    20        5  49     0

See =?veteran= for a presentation of the database.

\clearpage

* Performing generalized pairwise comparisons (GPC) using the =BuyseTest= function

To perform generalized pairwise comparisons, the =BuyseTest= function needs:
- an where the data are stored \hfill - argument =data=
- the name of the endpoints \hfill - argument =endpoint=
- the type of each endpoint \hfill - argument =type=
- the variable defining the two treatment groups \hfill - argument
  =treatment=
The =BuyseTest= function has many optional arguments to specify for example:
- the threshold associated to each endpoint (default\(=10^{-12}\))  \hfill - argument =threshold=
- the censoring associated to each endpoint (for time to event endpoint) \hfill - argument =censoring=
- how to compute the distribution of the statistic of interest \hfill - argument =method.inference=

\bigskip

There are two equivalent ways to define the GPC: 
- using a separate argument for each element[fn:1]:


[fn:1] we set the argument =method.inference= to "none" to diseable
the computation of p-values and confidence intervals. This makes the
execution of =BuyseTest= much faster.


#+BEGIN_SRC R :exports both :results output :session *R* :cache no
BT <- BuyseTest(data = veteran, 
                endpoint = "time", 
                type = "timeToEvent", 
                treatment = "trt", 
                censoring = "status", 
                threshold = 20,
                method.inference = "none")
#+END_SRC

#+RESULTS:
#+begin_example

         Generalized Pairwise Comparisons

Settings 
   - treatment groups: Control = 1 and Treatment = 2
   - 1 endpoint: 
       priority endpoint type           operator             threshold censoring
       1        time     time to event  higher is favorable  20        status   
   - management of neutral pairs: re-analyzed using endpoints of lower priority (if any) 
   - management of censored survival pairs: use Kaplan Meier survival curves to compute the score 

Point estimation

Gather the results in a BuyseRes object
#+end_example

\clearpage

- or via a formula interface. In the formula interface endpoint are
  wrapped by parentheses. The parentheses must be preceded by their
  type: 
    #+ATTR_LATEX: :environment itemize :options [label={-}]
    + binary (=b=, =bin=, or =binary=)
    + continuous (=c=, =cont=, or  =continuous=)
    + time to event (=t=, =tte=, or =timetoevent=)

#+BEGIN_SRC R :exports both :results output :session *R* :cache no
BT.f <- BuyseTest(trt ~ tte(time, threshold = 20, censoring = "status"),
                  data = veteran, trace = 0, method.inference = "none")
#+END_SRC

#+RESULTS:

Here we set in addition the argument =trace= to 0 to force the
function to be silent (i.e. no display in the terminal). We can check
that the two approaches are equivalent:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
testthat::expect_equal(BT.f,BT)
#+END_SRC

#+RESULTS:

** Displaying the results

The results of the GPC can be displayed using the =summary= method:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
summary(BT)
#+END_SRC 

#+RESULTS:
:         Generalized pairwise comparison with 1 prioritized endpoint
: 
:  > statistic       : net benefit (delta: endpoint specific, Delta: global) 
:  > null hypothesis : Delta == 0 
:  > treatment groups: 1 (control) vs. 2 (treatment) 
:  > censored pairs  : use Kaplan Meier survival curves to compute the score
:  > results
:  endpoint threshold total favorable unfavorable neutral uninf   delta   Delta
:      time        20   100     37.78       46.54   15.68     0 -0.0877 -0.0877

 To display the number of pairs instead of the percentage of pairs
that are favorable/unfavorable/neutral/uniformative, set the argument
=percentage= to =FALSE=:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
summary(BT, percentage = FALSE)
#+END_SRC

#+RESULTS:
:         Generalized pairwise comparison with 1 prioritized endpoint
: 
:  > statistic       : net benefit (delta: endpoint specific, Delta: global) 
:  > null hypothesis : Delta == 0 
:  > treatment groups: 1 (control) vs. 2 (treatment) 
:  > censored pairs  : use Kaplan Meier survival curves to compute the score
:  > results
:  endpoint threshold total favorable unfavorable neutral uninf   delta   Delta
:      time        20  4692   1772.59     2183.89  735.52     0 -0.0877 -0.0877

By default =summary= displays results relative to the net benefit. To
get results for the win ratio set the argument =statistic= to
"winRatio":
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
summary(BT, statistic = "winRatio")
#+END_SRC

#+RESULTS:
:         Generalized pairwise comparison with 1 prioritized endpoint
: 
:  > statistic       : win ratio (delta: endpoint specific, Delta: global) 
:  > null hypothesis : Delta == 1 
:  > treatment groups: 1 (control) vs. 2 (treatment) 
:  > censored pairs  : use Kaplan Meier survival curves to compute the score
:  > results
:  endpoint threshold total favorable unfavorable neutral uninf  delta  Delta
:      time        20   100     37.78       46.54   15.68     0 0.8117 0.8117

Since we have set the argument =n.permutation= to 0 (i.e. no
permutation test) in the stratified analysis, we do not get confidence
intervals or p.values when calling the =summary= method.

** Using multiple endpoints
More than one endpoint can be considered by indicating a vector of
endpoints, types, and thresholds. In the formula interface, just add
another endpoint at then end of the formula:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
BT.multi <- BuyseTest(trt ~ tte(time, threshold = 20, censoring = "status",) + cont(karno, threshold = 0),
                      data = veteran, method.inference = "none", trace = 0)

#+END_SRC

#+RESULTS:

The hierarchy of the endpoint is defined from left (most important
endpoint, here =time=) to right (least important endpoint, here
=karno=).

** What if smaller is better?
By default =BuyseTest= will always assume that higher values of an
endpoint are favorable. This behavior can be changed by specifying =operator = "<0"=
for an endpoint:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
BTinv <- BuyseTest(trt ~ tte(time, threshold = 20, censoring = "status", operator = "<0"),
                   data = veteran, method.inference = "none", trace = 0)
BTinv
#+END_SRC

#+RESULTS:
:  endpoint threshold  delta  Delta
:      time        20 0.0844 0.0844

Internally =BuyseTest= will multiply by -1 the values of the endpoint
to ensure that lower values are considered as favorable. A direct
consequence is that =BuyseTest= will not accept an endpoint with
different operators:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
try(BuyseTest(trt ~ tte(time, threshold = 20, censoring = "status", operator = "<0") + tte(time, 10, "status", ">0"),
              data = veteran, method.inference = "none", trace = 0))
#+END_SRC

#+RESULTS:
: Error in (function (alternative, name.call, censoring, correction.uninf,  : 
:   Cannot have different operator for the same endpoint used at different priorities


** Stratified GPC

GPC can be performed for subgroups of a categorical variable \hfill -
argument =strata=

\bigskip

 For instance, the celltype may have huge influence on the survival
time and the investigator would like to only compare patients that
have the same celltype. In the formula interface this is achieved by
adding a single variable in the right hand side of the formula:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
BT2 <- BuyseTest(trt ~ tte(time, threshold = 20, censoring = "status") + cont(karno, threshold = 0) + celltype,
                 data = veteran, trace = 0, method.inference = "none")
#+END_SRC

#+RESULTS:

The fact the it is not wrapped by =bin=, =cont= or =tte= indicates
differentiate it from endpoint variables. When doing a stratified
analysis, the summary method displays the global results as well as
the results within each strata:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
summary(BT2)
#+END_SRC

#+RESULTS:
#+begin_example
        Generalized pairwise comparison with 2 prioritized endpoints and 4 strata

 > statistic       : net benefit (delta: endpoint specific, Delta: global) 
 > null hypothesis : Delta == 0 
 > treatment groups: 1 (control) vs. 2 (treatment) 
 > censored pairs  : use Kaplan Meier survival curves to compute the score
 > results
 endpoint threshold    strata  total favorable unfavorable neutral uninf   delta   Delta
     time        20    global 100.00     36.06       45.77   17.33  0.85 -0.0971 -0.0971
                     squamous  25.38     14.33        8.77    2.28  0.00  0.2193        
                    smallcell  45.69     12.69       20.88   11.27  0.85 -0.1792        
                        adeno  13.71      4.74        6.15    2.81  0.00 -0.1034        
                        large  15.23      4.30        9.97    0.96  0.00 -0.3722        
    karno     1e-12    global  18.17      6.72        8.07    3.38  0.00 -0.0135 -0.1106
                     squamous   2.28      0.76        0.94    0.59  0.00 -0.0071        
                    smallcell  12.12      4.33        5.75    2.03  0.00 -0.0311        
                        adeno   2.81      1.46        0.85    0.51  0.00  0.0448        
                        large   0.96      0.17        0.54    0.25  0.00 -0.0241
#+end_example

Note that here the numbers in the
favorable/unfavorable/neutral/uniformative columns are relative to the
overall sample while the delta is only relative to the strata. The
global delta is a sum of the strata specific delta weighted by the
empirical proportion of pairs for each strata.

\clearpage

** Stopping comparison for neutral pairs
In presence of neutral pairs, =BuyseTest= will, by default, continue
the comparison on the endpoints with lower priority. For instance let
consider a dataset with one observation in each treatment arm:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
dt.sim <- data.table(Id = 1:2,
                     treatment = c("Yes","No"),
                     tumor = c("Yes","Yes"),
                     size = c(15,20))
dt.sim
#+END_SRC

#+RESULTS:
:    Id treatment tumor size
: 1:  1       Yes   Yes   15
: 2:  2        No   Yes   20

If we perform we GPC with tumor as the first endpoint and size as the
second endpoint:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
BT.pair <- BuyseTest(treatment ~ bin(tumor) + cont(size, operator = "<0"), data = dt.sim,
                     trace = 0, method.inference = "none")
summary(BT.pair)
#+END_SRC

#+RESULTS:
:         Generalized pairwise comparison with 2 prioritized endpoints
: 
:  > statistic       : net benefit (delta: endpoint specific, Delta: global) 
:  > null hypothesis : Delta == 0 
:  > treatment groups: 0 (control) vs. 1 (treatment) 
:  > results
:  endpoint threshold total favorable unfavorable neutral uninf delta Delta
:     tumor       0.5   100         0           0     100     0     0     0
:      size     1e-12   100       100           0       0     0     1     1

the outcome of the comparison is neutral for the first priority, but
favorable for the second priority. If we set the argument
=neutral.as.uninf= to =FALSE=, =BuyseTest= will stop the comparison
when a pair is classified as neutral:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
BT.pair2 <- BuyseTest(treatment ~ bin(tumor) + cont(size, operator = "<0"), data = dt.sim,
                     trace = 0, method.inference = "none", neutral.as.uninf = FALSE)
summary(BT.pair2)
#+END_SRC

#+RESULTS:
:         Generalized pairwise comparison with 2 prioritized endpoints
: 
:  > statistic       : net benefit (delta: endpoint specific, Delta: global) 
:  > null hypothesis : Delta == 0 
:  > treatment groups: 0 (control) vs. 1 (treatment) 
:  > results
:  endpoint threshold total favorable unfavorable neutral uninf delta Delta
:     tumor       0.5   100         0           0     100     0     0     0
:      size     1e-12     0         0           0       0     0     0     0

So in this case no pair is analyzed at second priority.

** What about p-value and confidence intervals?

P-values can be estimated via a permutation test:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
BT.perm <- BuyseTest(trt ~ tte(time, threshold = 20, censoring = "status"),
                     data = veteran, trace = 0, method.inference = "permutation",
                     n.resampling = 25) 
summary(BT.perm)
#+END_SRC

#+RESULTS:
#+begin_example
        Generalized pairwise comparison with 1 prioritized endpoint

 > statistic       : net benefit (delta: endpoint specific, Delta: global) 
 > null hypothesis : Delta == 0 
 > permutation test: 25 samples, confidence level 0.95 
 > treatment groups: 1 (control) vs. 2 (treatment) 
 > censored pairs  : use Kaplan Meier survival curves to compute the score
 > results
 endpoint threshold total favorable unfavorable neutral uninf   delta   Delta
     time        20   100     37.78       46.54   15.68     0 -0.0877 -0.0877
  CI [2.5 ; 97.5] p.value 
 [-0.3245;0.1381]    0.32 
NOTE: confidence intervals computed under the null hypothesis
#+end_example

The argument =n.resampling= indicates the permutation that will be
performed. We set it to 10 to save computation time but to obtain
reliable p-value/confidence intervals, =n.resampling= should be at
least 1000. The validity of the confidence intervals obtained via a
permutation test is questionable and we recommend instead to use a
bootstrap approach for estimating confidence intervals. To do so, set
the argument =method.inference= to ="bootstrap"= when calling
=BuyseTest=:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
BT.boot <- BuyseTest(trt ~ tte(time, threshold = 20, censoring = "status"),
                     data = veteran, trace = 0, method.inference = "bootstrap",
                     n.resampling = 25) 
summary(BT.boot)
#+END_SRC

#+RESULTS:
#+begin_example
        Generalized pairwise comparison with 1 prioritized endpoint

 > statistic       : net benefit (delta: endpoint specific, Delta: global) 
 > null hypothesis : Delta == 0 
 > bootstrap resampling: 25 samples, confidence level 0.95 
 > treatment groups: 1 (control) vs. 2 (treatment) 
 > censored pairs  : use Kaplan Meier survival curves to compute the score
 > results
 endpoint threshold total favorable unfavorable neutral uninf   delta   Delta
     time        20   100     37.78       46.54   15.68     0 -0.0877 -0.0877
  CI [2.5 ; 97.5] p.value 
 [-0.1802;0.0248]     0.2
#+end_example


\clearpage

* Getting additional inside: looking at the pair level

So far we have looked at the overall score and probabilities. But it
is also possible to extract the score relative to each pair, as well
as to "manually" compute this score. This can give further inside on
what the software is actually doing and what is the contribution of
each individual on the evaluation of the treatment.

** Extracting the contribution of each pair to the statistic
The net benefit or the win ratio statistics can be expressed as a sum
of a score over all pairs of patients. The argument =keep.pairScore=
enables to export the score relative to each pair in the output of
BuyseTest:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
form <- trt ~ tte(time, threshold = 20, censoring = "status") + cont(karno)
BT.keep <- BuyseTest(form,
                     data = veteran, keep.pairScore = TRUE, 
                     trace = 0, method.inference = "none")
#+END_SRC

#+RESULTS:

The method =getPairScore= can then be used to extract the contribution
of each pair. For instance the following code extracts the
contribution for the first endpoint:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
getPairScore(BT.keep, endpoint = 1)
#+END_SRC

#+RESULTS:
#+begin_example
      strata index.1 index.2 favorable unfavorable neutral uninf weight favorableC
   1:      1       1      70         1           0       0     0      1          1
   2:      1       2      70         1           0       0     0      1          1
   3:      1       3      70         1           0       0     0      1          1
   4:      1       4      70         1           0       0     0      1          1
   5:      1       5      70         1           0       0     0      1          1
  ---                                                                             
4688:      1      65     137         0           1       0     0      1          0
4689:      1      66     137         0           1       0     0      1          0
4690:      1      67     137         0           1       0     0      1          0
4691:      1      68     137         0           1       0     0      1          0
4692:      1      69     137         0           1       0     0      1          0
      unfavorableC neutralC uninfC
   1:            0        0      0
   2:            0        0      0
   3:            0        0      0
   4:            0        0      0
   5:            0        0      0
  ---                             
4688:            1        0      0
4689:            1        0      0
4690:            1        0      0
4691:            1        0      0
4692:            1        0      0
#+end_example

Each line corresponds to different comparison between a pair from the
control arm and the treatment arm. The column =strata= store to which
strata the pair belongs (first, second, ...). The columns favorable,
unfavorable, neutral, uninformative contains the result of the
comparison, e.g. the first pair was classified as favorable while the
last was classified as favorable with a weight of 1. The second and
third columns indicates the rows in the original dataset corresponding
to the pair:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
veteran[c(70,1),]
#+END_SRC

#+RESULTS:
:    trt celltype time status karno diagtime age prior
: 70   2 squamous  999      1    90       12  54    10
: 1    1 squamous   72      1    60        7  69     0


For the first pair, the event was observed for both observations and
since 999 > 72 + 20 the pair is rated favorable. Substracting the
average probability of the pair being favorable minus the average
probability of the pair being unfavorable:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
getPairScore(BT.keep, endpoint = 1)[, mean(favorable) - mean(unfavorable)]
#+END_SRC

#+RESULTS:
: [1] -0.08765836

 gives the net benefit in favor of the treatment for the first
 endpoint:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
BT.keep
#+END_SRC

#+RESULTS:
:  endpoint threshold   delta   Delta
:      time        20 -0.0877 -0.0877
:     karno     1e-12 -0.0133 -0.1009

More examples and explanation can be found in the documentation of
the method =getPairScore=.

** Extracting the survival probabilities
When using =method.tte= equals ="Peron"=, survival probabilities at
event time, and event times +/- threshold in the control and treatment
arms are used to score the pair. Setting =keep.survival= to =TRUE= in
BuyseTest.options enables to export the survival probabilities in the
output of BuyseTest:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
BuyseTest.options(keep.survival = TRUE)
BT.keep2 <- BuyseTest(trt ~ tte(time, threshold = 20, censoring = "status") + cont(karno),
                      data = veteran, keep.pairScore = TRUE, method.tte = "Peron",
                      trace = 0, method.inference = "none")
#+END_SRC

#+RESULTS:


The method =getSurvival= can then be used to extract these survival
probabilities. For instance the following code extracts the survival
for the first endpoint:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
outSurv <- getSurvival(BT.keep2, endpoint = 1, strata = 1)
str(outSurv)
#+END_SRC

#+RESULTS:
#+begin_example
List of 5
 $ survTimeC: num [1:69, 1:7] 72 411 228 126 118 10 82 110 314 100 ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : NULL
  .. ..$ : chr [1:7] "time" "SurvivalC-threshold" "SurvivalC_0" "SurvivalC+threshold" ...
 $ survTimeT: num [1:68, 1:7] 999 112 87 231 242 991 111 1 587 389 ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : NULL
  .. ..$ : chr [1:7] "time" "SurvivalC-threshold" "SurvivalC_0" "SurvivalC+threshold" ...
 $ survJumpC: num [1:57, 1:3] 3 4 7 8 10 11 12 13 16 18 ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : NULL
  .. ..$ : chr [1:3] "time" "survival" "dSurvival"
 $ survJumpT: num [1:51, 1:3] 1 2 7 8 13 15 18 19 20 21 ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : NULL
  .. ..$ : chr [1:3] "time" "survival" "dSurvival"
 $ lastSurv : num [1:2] 0 0
#+end_example

*** Computation of the score with only one censored event

Let's look at pair 91:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
getPairScore(BT.keep2, endpoint = 1, rm.withinStrata = FALSE)[91]
#+END_SRC

#+RESULTS:
:    strata index.1 index.2 indexWithinStrata.1 indexWithinStrata.2 favorable unfavorable
: 1:      1      22      71                  22                   2         0   0.6950827
:      neutral uninf weight favorableC unfavorableC  neutralC uninfC
: 1: 0.3049173     0      1          0    0.6950827 0.3049173      0

In the dataset this corresponds to:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
veteran[c(22,71),]
#+END_SRC

#+RESULTS:
:    trt  celltype time status karno diagtime age prior
: 22   1 smallcell   97      0    60        5  67     0
: 71   2  squamous  112      1    80        6  60     0

The observation from the control group is censored at 97 while the
observation from the treatment group has an event at 112. Since the
threshold is 20, and (112-20)<97, we know that the pair is not in
favor of the treatment. The formula for probability in favor of the
control is \(\frac{S_c(97)}{S_c(112+20)}\). The survival at the event
time in the censoring group is stored in survTimeC. Since observation
22 is the 22th observation in the control group:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
iSurv <- outSurv$survTimeC[22,] 
iSurv
#+END_SRC 

#+RESULTS:
:                time SurvivalC-threshold         SurvivalC_0 SurvivalC+threshold 
:          97.0000000           0.5615232           0.5171924           0.4235463 
: SurvivalT-threshold         SurvivalT_0 SurvivalT+threshold 
:           0.4558824           0.3643277           0.2827500

Since we are interested in the survival in the control arm exactly at the event time:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
Sc97 <- iSurv["SurvivalC_0"] 
Sc97
#+END_SRC

#+RESULTS:
: SurvivalC_0 
:   0.5171924

The survival at the event time in the treatment group is stored in
survTimeC. Since observation 71 is the 2nd observation in the treatment
group:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
iSurv <- outSurv$survTimeT[2,] ## survival at time 112+20
iSurv
#+END_SRC

#+RESULTS:
:                time SurvivalC-threshold         SurvivalC_0 SurvivalC+threshold 
:         112.0000000           0.5319693           0.4549201           0.3594915 
: SurvivalT-threshold         SurvivalT_0 SurvivalT+threshold 
:           0.3801681           0.2827500           0.2827500

Since we are interested in the survival in the control arm at the event time plus threshold:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
Sc132 <- iSurv["SurvivalC+threshold"] 
Sc132
#+END_SRC

#+RESULTS:
: SurvivalC+threshold 
:           0.3594915

The probability in favor of the control is then:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
Sc132/Sc97
#+END_SRC

#+RESULTS:
: SurvivalC+threshold 
:           0.6950827

*** Computation of the score with two censored events

When both observations are censored, the formula for computing the
probability in favor of treatment or control involves an
integral. This integral can be computed using the function
=calcIntegralScore\_cpp= that takes as argument a matrix containing the
survival and the jumps in survival, e.g.:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
head(outSurv$survJumpT)
#+END_SRC

#+RESULTS:
:      time  survival   dSurvival
: [1,]    1 0.7681159 -0.02941176
: [2,]    2 0.7536232 -0.01470588
: [3,]    7 0.7388463 -0.02941176
: [4,]    8 0.7388463 -0.02941176
: [5,]   13 0.7092924 -0.01470588
: [6,]   15 0.6945155 -0.02941176

and the starting time of the integration time. For instance, let's
look at pair 148:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
getPairScore(BT.keep2, endpoint = 1, rm.withinStrata = FALSE)[148]
#+END_SRC

#+RESULTS:
:    strata index.1 index.2 indexWithinStrata.1 indexWithinStrata.2 favorable unfavorable
: 1:      1      10      72                  10                   3 0.5058685   0.3770426
:      neutral uninf weight favorableC unfavorableC  neutralC uninfC
: 1: 0.1170889     0      1  0.5058685    0.3770426 0.1170889      0

which corresponds to the observations:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
veteran[c(10,72),]
#+END_SRC

#+RESULTS:
:    trt celltype time status karno diagtime age prior
: 10   1 squamous  100      0    70        6  70     0
: 72   2 squamous   87      0    80        3  48     0

The probability in favor of the treatment (\(p_F\)) and control (\(p_{UF}\)) can be computed
as:
#+BEGIN_EXPORT latex
\begin{align*}
p_F &= -\frac{1}{S_T(x)S_C(y)}\int_{t>y} S_T(t+\tau) dS_C(t) \\
p_{UF} &= -\frac{1}{S_T(x)S_C(y)}\int_{t>x} S_C(t+\tau) dS_T(t)
\end{align*}
#+END_EXPORT
where \(x=87\) and \(y=100\). We obtain:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
denom <- as.double(outSurv$survTimeT[3,"SurvivalT_0"] * outSurv$survTimeC[10,"SurvivalC_0"])
M <- cbind("favorable" = -calcIntegralScore_cpp(outSurv$survJumpC, start = 100, 
                                                lastSurv = outSurv$lastSurv[2],
                                                lastdSurv = outSurv$lastSurv[1])/denom,
           "unfavorable" = -calcIntegralScore_cpp(outSurv$survJumpT, start = 87, 
                                                  lastSurv = outSurv$lastSurv[1],
                                                  lastdSurv = outSurv$lastSurv[2])/denom)
rownames(M) <- c("lowerBound","upperBound")
M
#+END_SRC

#+RESULTS:
:            favorable unfavorable
: lowerBound 0.5058685   0.3770426
: upperBound 0.5058685   0.3770426

\clearpage

* Dealing with missing values or/and right censoring 

In presence of censoring or missing values, some pairs may be
classified as uninformative. This may bias the estimate of the net net
benefit. Two corrections are currently proposed to correct this bias.

\bigskip

To illustrate the effect of these correction, we will use the
following dataset:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
set.seed(10)
dt <- simBuyseTest(5e2, latent = TRUE, argsCont = NULL,
                   argsTTE = list(rates.T = 2, rates.C = 1, rates.Censoring = 3))
dt[, status1 := 1]
head(dt)
#+END_SRC

#+RESULTS:
:    Treatment toxicity eventtimeUncensored eventtimeCensoring eventtime status status1
: 1:         C        0           0.1588268          2.6268101 0.1588268      1       1
: 2:         C        1           1.7204676          0.2000192 0.2000192      0       1
: 3:         C        1           0.4900490          0.5747995 0.4900490      1       1
: 4:         C        0           0.1138545          1.5188001 0.1138545      1       1
: 5:         C        1           0.5191035          3.8340048 0.5191035      1       1
: 6:         C        0           0.9405830          1.9078657 0.9405830      1       1

where we have the uncensored event times as well as the censored event
times. The percentage of censored observations is:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
dt[,mean(status==0)]
#+END_SRC

#+RESULTS:
: [1] 0.317

We would like to be able to recover the net benefit estimated with the uncensored event times:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
BuyseTest(Treatment ~ tte(eventtimeUncensored, status1, threshold = 1),
          data = dt,
          method.tte = "Gehan", method.inference = "none", trace = 0)
#+END_SRC

#+RESULTS:
:             endpoint threshold  delta  Delta
:  eventtimeUncensored         1 0.2401 0.2401

using the censored survival times:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
BuyseTest(Treatment ~ tte(eventtime, status, threshold = 1),
          data = dt,
          method.tte = "Gehan", method.inference = "none", trace = 0)
#+END_SRC

#+RESULTS:
:   endpoint threshold  delta  Delta
:  eventtime         1 0.1363 0.1363

As we can see on this example, the net benefit is shrunk toward 0.

*** Inverse probability-of-censoring weights (IPCW)

With IPCW the weights of the non-informative pairs is redistributed to
the informative pairs. This is only a good strategy when there are no
neutral pairs or there are no lower priority endpoints. This gives an
estimate much closer to the true net benefit:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
BT <- BuyseTest(Treatment ~ tte(eventtime, status, threshold = 1),
                data = dt, keep.pairScore = TRUE, trace = 0,
                method.tte = "Gehan", method.inference = "none", correction.uninf = 2)
summary(BT)
#+END_SRC

#+RESULTS:
#+begin_example
        Generalized pairwise comparison with 1 prioritized endpoint

 > statistic       : net benefit (delta: endpoint specific, Delta: global) 
 > null hypothesis : Delta == 0 
 > treatment groups: C (control) vs. T (treatment) 
 > censored pairs  : uninformative pairs
 > uninformative pairs: no contribution, their weight is passed to the informative pairs using IPCW
 > results
  endpoint threshold total favorable unfavorable neutral uninf  delta  Delta
 eventtime         1   100     37.11       12.34   50.54     0 0.2477 0.2477
#+end_example


We can also see that no pair is finally classified as non
informative. To get some inside about the correction we can look at
the scores of the pairs:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
iScore <- getPairScore(BT, endpoint = 1)
#+END_SRC

#+RESULTS:

To get a synthetic view, we only look at the unique
favorable/unfavorable/neutral/uniformative results:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
iScore[,.SD[1], 
       .SDcols = c("favorableC","unfavorableC","neutralC","uninfC"),
       by = c("favorable","unfavorable","neutral","uninf")]
#+END_SRC

#+RESULTS:
:    favorable unfavorable neutral uninf favorableC unfavorableC neutralC uninfC
: 1:         0           0       1     0    0.00000      0.00000  1.81657      0
: 2:         0           0       0     1    0.00000      0.00000  0.00000      0
: 3:         0           1       0     0    0.00000      1.81657  0.00000      0
: 4:         1           0       0     0    1.81657      0.00000  0.00000      0

We can see that the favorable/unfavorable/neutral pairs have seen
their contribution multiplied by:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
iScore[,1/mean(favorable + unfavorable + neutral)]
#+END_SRC

#+RESULTS:
: [1] 1.81657

i.e. the inverse probability of being informative. 

*** Correction at the pair level

Another possible correction is to distribute the non-informative
weight of a pair to the average favorable/unfavorable/neutral
probability observed on the sample:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
BT <- BuyseTest(Treatment ~ tte(eventtime, status, threshold = 1),
                data = dt, keep.pairScore = TRUE, trace = 0,
                method.tte = "Gehan", method.inference = "none", correction.uninf = TRUE)
summary(BT)
#+END_SRC

#+RESULTS:
#+begin_example
        Generalized pairwise comparison with 1 prioritized endpoint

 > statistic       : net benefit (delta: endpoint specific, Delta: global) 
 > null hypothesis : Delta == 0 
 > treatment groups: C (control) vs. T (treatment) 
 > censored pairs  : uninformative pairs
 > uninformative pairs: score equals the averaged score of all informative pairs
 > results
  endpoint threshold total favorable unfavorable neutral uninf  delta  Delta
 eventtime         1   100     37.11       12.34   50.54     0 0.2477 0.2477
#+end_example


Looking at the scores of the pairs:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
iScore <- getPairScore(BT, endpoint = 1)
iScore[,.SD[1], 
       .SDcols = c("favorableC","unfavorableC","neutralC","uninfC"),
       by = c("favorable","unfavorable","neutral","uninf")]
#+END_SRC

#+RESULTS:
:    favorable unfavorable neutral uninf favorableC unfavorableC  neutralC uninfC
: 1:         0           0       1     0   0.000000    0.0000000 1.0000000      0
: 2:         0           0       0     1   0.371118    0.1234396 0.5054424      0
: 3:         0           1       0     0   0.000000    1.0000000 0.0000000      0
: 4:         1           0       0     0   1.000000    0.0000000 0.0000000      0

we can see that the corrected probability have not changed for the
informative pairs, but for the non-informative they have been set to:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
iScore[, .(favorable = weighted.mean(favorable, w = 1-uninf), 
           unfavorable = weighted.mean(unfavorable, w = 1-uninf), 
           neutral = weighted.mean(neutral, w = 1-uninf))]
#+END_SRC

#+RESULTS:
:    favorable unfavorable   neutral
: 1:  0.371118   0.1234396 0.5054424

\clearpage

* Simulating data using =simBuyseTest=
You can simulate data with the =simBuyseTest= function. For instance
the following code simulates data for 5 individuals in the treatment
arm and 5 individuals in the control arm:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
set.seed(10)
simBuyseTest(n.T = 5, n.C = 5)
#+END_SRC

#+RESULTS:
#+begin_example
    Treatment toxicity       score eventtime status
 1:         C        1  0.54361539 1.8252132      0
 2:         C        1 -0.70762484 2.9489056      1
 3:         C        1 -0.36944577 0.7213402      0
 4:         C        1 -1.32197565 0.6322603      1
 5:         C        1  1.28059746 0.2212117      0
 6:         T        1  0.01874617 0.1453481      0
 7:         T        1 -0.18425254 0.4855601      0
 8:         T        0 -1.37133055 0.2547505      0
 9:         T        1 -0.59916772 1.0340368      0
10:         T        0  0.29454513 0.3579324      1
#+end_example

By default a categorical, continuous and time to event outcome are
generated independently. You can modify their distribution via the
arguments =argsBin=, =argsCont=, =argsTTE=. For instance the following
code simulates two continuous variables with mean 5 in the treatment
arm and 10 in the control arm all with variance 1:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
set.seed(10)
argsCont <- list(mu.T = c(5,5), mu.C = c(10,10), 
                 sigma.T = c(1,1), sigma.C = c(1,1),
                 name = c("tumorSize","score"))
dt <- simBuyseTest(n.T = 5, n.C = 5,
                   argsCont = argsCont)
dt
#+END_SRC

#+RESULTS:
#+begin_example
    Treatment toxicity tumorSize     score eventtime status
 1:         C        1  9.010394 10.667415 0.2729620      0
 2:         C        0  9.965152 11.691755 0.5562477      0
 3:         C        0 10.847160 10.001261 0.8040608      0
 4:         C        0 11.525498  9.257539 1.8477048      1
 5:         C        1  9.932625 10.609684 0.3639572      1
 6:         T        1  5.389794  5.018746 0.6243732      0
 7:         T        1  3.791924  4.815747 0.3527879      1
 8:         T        1  4.636324  3.628669 1.7731161      0
 9:         T        0  3.373327  4.400832 0.1055467      0
10:         T        0  4.743522  5.294545 0.8612402      0
#+end_example

This functionality is based on the =sim= function of the *lava*
package (https://github.com/kkholst/lava)

\clearpage
* Modifying default options
The =BuyseTest.options= method enable to get and set the default
options of the =BuyseTest= function. For instance, the default option
for trace is:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
BuyseTest.options("trace")
#+END_SRC

#+RESULTS:
: $trace
: [1] 2

To change the default option to 0 (i.e. no output) use:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
BuyseTest.options(trace = 0)
#+END_SRC

#+RESULTS:

To restore the original default options do:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
BuyseTest.options(reinitialise = TRUE)
#+END_SRC

#+RESULTS:

\clearpage


* Information about the R session used for this document

#+BEGIN_SRC R :exports both :results output :session *R* :cache no
sessionInfo()
#+END_SRC

#+RESULTS:
#+begin_example
R version 3.5.1 (2018-07-02)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 7 x64 (build 7601) Service Pack 1

Matrix products: default

locale:
[1] LC_COLLATE=Danish_Denmark.1252  LC_CTYPE=Danish_Denmark.1252   
[3] LC_MONETARY=Danish_Denmark.1252 LC_NUMERIC=C                   
[5] LC_TIME=Danish_Denmark.1252    

attached base packages:
[1] stats4    parallel  stats     graphics  grDevices utils     datasets  methods  
[9] base     

other attached packages:
 [1] lava_1.6.3          doParallel_1.0.14   iterators_1.0.10    foreach_1.4.4      
 [5] BuyseTest_1.6.2     testthat_2.0.0      data.table_1.11.8   Rcpp_0.12.19       
 [9] prodlim_2018.04.18  spelling_1.2        roxygen2_6.1.0.9000 butils.base_1.1    
[13] XML_3.98-1.16       selectr_0.4-1       devtools_1.13.6    

loaded via a namespace (and not attached):
 [1] compiler_3.5.1            pipeR_0.6.1.3             base64enc_0.1-3          
 [4] tools_3.5.1               digest_0.6.17             pkgbuild_1.0.1           
 [7] pkgload_1.0.0             memoise_1.1.0             lattice_0.20-35          
[10] rlang_0.2.2               Matrix_1.2-14             commonmark_1.6           
[13] RcppArmadillo_0.9.100.5.0 withr_2.1.2               httr_1.3.1               
[16] stringr_1.3.1             xml2_1.2.0                desc_1.2.0               
[19] rprojroot_1.3-2           grid_3.5.1                R6_2.3.0                 
[22] processx_3.2.0            survival_2.42-6           purrr_0.2.5              
[25] callr_3.0.0               magrittr_1.5              codetools_0.2-15         
[28] splines_3.5.1             ps_1.1.0                  backports_1.1.2          
[31] assertthat_0.2.0          rvest_0.3.2               KernSmooth_2.23-15       
[34] stringi_1.2.4             crayon_1.3.4              zoo_1.8-4
#+end_example



* CONFIG :noexport:
#+LANGUAGE:  en
#+LaTeX_CLASS: org-article
#+LaTeX_CLASS_OPTIONS: [12pt]
#+OPTIONS:   title:t author:t toc:nil todo:nil
#+OPTIONS:   H:3 num:t 
#+OPTIONS:   TeX:t LaTeX:t
#+PROPERTY: tangle yes

** Code
#+PROPERTY: header-args :session *R*
#+PROPERTY: header-args :tange yes % extract source code: http://orgmode.org/manual/Extracting-source-code.html
#+PROPERTY: header-args :cache no 
#+LATEX_HEADER: \RequirePackage{fancyvrb}
#+LATEX_HEADER: \DefineVerbatimEnvironment{verbatim}{Verbatim}{fontsize=\small,formatcom = {\color[rgb]{0.5,0,0}}}

** Display 
#+LaTeX_HEADER: \geometry{a4paper, left=15mm, right=15mm}

#+LATEX_HEADER: \RequirePackage{colortbl} % arrayrulecolor to mix colors
#+LATEX_HEADER: \RequirePackage{setspace} % to modify the space between lines - incompatible with footnote in beamer
#+LaTeX_HEADER:\usepackage{authblk} % enable several affiliations (clash with beamer)
#+LaTeX_HEADER:\renewcommand{\baselinestretch}{1.1}
#+LATEX_HEADER:\geometry{top=1cm}

** List
#+LaTeX_HEADER: \usepackage{enumitem}

** Notations
#+LATEX_HEADER: \RequirePackage{xspace} % 
#+LATEX_HEADER: \newcommand\Rlogo{\textbf{\textsf{R}}\xspace} % 

** Image
#+LATEX_HEADER: \RequirePackage{epstopdf} % to be able to convert .eps to .pdf image files
