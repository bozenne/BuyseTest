#+BEGIN_HTML
<a href="https://travis-ci.org/bozenne/BuyseTest"><img src="https://travis-ci.org/bozenne/BuyseTest.svg?branch=master"></a>
<a href="http://cran.rstudio.com/web/packages/BuyseTest/index.html"><img src="http://www.r-pkg.org/badges/version/BuyseTest"></a>
<a href="http://cranlogs.r-pkg.org/downloads/total/last-month/BuyseTest"><img src="http://cranlogs.r-pkg.org/badges/BuyseTest"></a>
#+END_HTML

* BuyseTest

*BuyseTest* is a package for the R software
(https://www.r-project.org/) implementing generalized pairwise
comparisons (GPC). This enables to compare two groups of observations
in randomized trials(e.g treated vs. control patients) on several
prioritized outcomes. Pairwise comparisons require consideration of
all possible pairs of individuals, one taken from the treatment group
and the other taken from the control group. The outcomes of the two
individuals forming a pair are compared. Thresholds of minimal
clinically significant differences can be defined. It is possible to
analyse simultaneously several outcomes by prioritizing the variables
that capture them. The highest priority is assigned to the variable
considered the most clinically relevant.  A natural way of handling
uninformative or neutral pairs is to consider the outcomes in
descending order of priority: whenever a pair is uninformative or
neutral for an outcome of higher priority, the outcomes of lower
priority are examined In the case of time-to-event endpoint, four
methods to handle censored observations are available in this package
(Gehan, Peto, Efron, and Peron).

* Installation

You can download the latest stable version on =CRAN= using:
#+BEGIN_SRC R :exports both :eval never
install.packages("BuyseTest")
#+END_SRC

or download the development version from =GitHub=:
#+BEGIN_SRC R :exports both :eval never
library(devtools)
install_github("bozenne/BuyseTest")
#+END_SRC

* Citation
To cite this package in a publications please use:
#+BEGIN_QUOTE
Marc Buyse, Generalized pairwise comparisons of prioritized outcomes in the two-sample problem,
29-30:3245-3257, Statistics in Medicine. http://dx.doi.org/10.1002/sim.3923
#+END_QUOTE
In bibtex format:
#+BEGIN_SRC bibtex
@article {Buyse2010gpc,
author = {Buyse, Marc},
title = {Generalized pairwise comparisons of prioritized outcomes in the two-sample problem},
journal = {Statistics in Medicine},
volume = {29},
number = {30},
issn = {1097-0258},
url = {http://dx.doi.org/10.1002/sim.3923},
doi = {10.1002/sim.3923},
pages = {3245--3257},
year = {2010}
}
#+END_SRC bibtex

When applying GPC to time to event outcomes (argument =method= equal
to =Peron=, or =Peto=, or =Efron=), the software still use the
procedure of (Buyse et al., 2010) but deals with censoring using the
method proposed in:
#+BEGIN_QUOTE
Julien Péron, Marc Buyse, Brice Ozenne, Laurent Roche, Pascal Roy. An
extension of generalized pairwise comparisons for prioritized outcomes
in the presence of censoring.  2016. Statistical Methods in Medical
Research. http://dx.doi.org/10.1177/0962280216658320
#+END_QUOTE
In bibtex format:
#+BEGIN_SRC bibtex
@article{peron2016extension,
author = {Julien Péron and Marc Buyse and Brice Ozenne and Laurent Roche and Pascal Roy},
title = {An extension of generalized pairwise comparisons for prioritized outcomes in the presence of censoring},
journal = {Statistical Methods in Medical Research},
year = {2016},
volume = {27},
number = {4},
doi = {10.1177/0962280216658320},
URL = {http://dx.doi.org/10.1177/0962280216658320},
eprint = {http://dx.doi.org/10.1177/0962280216658320}
#+END_SRC bibtex

* Functionalities

Load *BuyseTest* in the R session:
#+BEGIN_SRC R  :results output   :exports both  :session *R* :cache no
suppressPackageStartupMessages(library(BuyseTest))
#+END_SRC

#+RESULTS:

** Simulate data
You can simulate data with the =simBuyseTest= function. For instance
the following code simulates data for 5 individuals in the treatment
arm and 5 individuals in the control arm:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
set.seed(10)
simBuyseTest(n.T = 5, n.C = 5)
#+END_SRC

#+RESULTS:
#+begin_example
    Treatment toxicity       score eventtime status
 1:         1        1  0.01874617 0.1453481      0
 2:         1        1 -0.18425254 0.4855601      0
 3:         1        0 -1.37133055 0.2547505      0
 4:         1        1 -0.59916772 1.0340368      0
 5:         1        0  0.29454513 0.3579324      1
 6:         0        1  0.54361539 1.8252132      0
 7:         0        1 -0.70762484 2.9489056      1
 8:         0        1 -0.36944577 0.7213402      0
 9:         0        1 -1.32197565 0.6322603      1
10:         0        1  1.28059746 0.2212117      0
#+end_example

By default a categorical, continuous and time to event outcome are
generated. You can modify their distribution via the arguments
=argsBin=, =argsCont=, =argsTTE=. For instance the following code
simulates two continuous variables with mean 5 in the treatment arm
and 10 in the control arm all with variance 1:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
set.seed(10)
argsCont <- list(mu.T = c(5,5), mu.C = c(10,10), 
                 sigma.T = c(1,1), sigma.C = c(1,1),
                 name = c("tumorSize","score"))
dt <- simBuyseTest(n.T = 5, n.C = 5,
                   argsCont = argsCont)
dt
#+END_SRC

#+RESULTS:
#+begin_example
    Treatment toxicity tumorSize     score eventtime status
 1:         1        1  5.389794  5.018746 0.6243732      0
 2:         1        1  3.791924  4.815747 0.3527879      1
 3:         1        1  4.636324  3.628669 1.7731161      0
 4:         1        0  3.373327  4.400832 0.1055467      0
 5:         1        0  4.743522  5.294545 0.8612402      0
 6:         0        1  9.010394 10.667415 0.2729620      0
 7:         0        0  9.965152 11.691755 0.5562477      0
 8:         0        0 10.847160 10.001261 0.8040608      0
 9:         0        0 11.525498  9.257539 1.8477048      1
10:         0        1  9.932625 10.609684 0.3639572      1
#+end_example
This functionality is based on the =sim= function of the *lava*
package (https://github.com/kkholst/lava)

** Perform generalized pairwise comparisons
*** Specifying GPC using the =BuyseTest= function
Let's consider the veteran dataset:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
data(veteran,package="survival")
head(veteran)
#+END_SRC

#+RESULTS:
:   trt celltype time status karno diagtime age prior
: 1   1 squamous   72      1    60        7  69     0
: 2   1 squamous  411      1    70        5  64    10
: 3   1 squamous  228      1    60        3  38     0
: 4   1 squamous  126      1    60        9  63    10
: 5   1 squamous  118      1    70       11  65    10
: 6   1 squamous   10      1    20        5  49     0

The BuyseTest function performs the generalized pairwise
comparisons (GPC). One needs to specify:
- the object where the data are stored
- the name of the endpoints
- the type of each endpoint: time to event (tte), continuous (cont), or binary (bin)
- the threshold associated to each endpoint (optional, by default 1e-12)
- the censoring associated to each endpoint (only required for time to event variables)
- the operator: is higher better or is lower better (optional, by default higher is better)
There are two equivalent ways to define the GPC: 
- via a formula interface
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
BT.f <- BuyseTest(trt ~ tte(time, threshold = 20, censoring = "status"),
                  data = veteran, trace = 3, method.inference = "none")
#+END_SRC

#+RESULTS:
: Settings (punctual estimation) 
:    > reference: Control = 1 and Treatment = 2
:    > 1 endpoint: 
:       |priority endpoint type          operator            threshold censoring |
:       |1        time     time to event higher is favorable 20        status    |
:    > management of neutral pairs : re-analyzed using endpoints of lower priority (if any) 
:    > management of censored survival pairs : imputation using different survival curve for control and treatment patients 
: Punctual estimation (done)

- or using a separate argument for each element:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
BT <- BuyseTest(endpoint = "time", 
                type = "timeToEvent", 
                treatment = "trt", 
                censoring = "status", 
                threshold = 20,
                data = veteran, 
                method.inference = "none",
                trace = 0)
#+END_SRC

#+RESULTS:
Here we set in addition the argument =trace= to 0 to force the
function to be silent (i.e. no display in the terminal). Also setting
the argument =method.inference= to ="none"= diseable the computation
of p-values and confidence intervals.

We can check that the two approaches are equivalent:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
library(testthat)
expect_equal(BT.f,BT)
#+END_SRC

#+RESULTS:

The =BuyseTest= function can perform stratified GPC with several endpoints:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
BT2 <- BuyseTest(trt ~ tte(time, threshold = 20, censoring = "status") + cont(karno, threshold = 0) + celltype,
                 data = veteran, trace = 0, method.inference = "none")
#+END_SRC

#+RESULTS:

Here we have asked for an analysis stratified on celltype, with two prioritized outcomes:
- first priority: time
- second priority: karno
By setting the argument =n.permutation= to 0, we have also disabled
the permutation test. This makes the execution of =BuyseTest= much
faster.

*** Display the results with the =summary= method
The results of the GPC can be displayed using the =summary= method:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
summary(BT)
#+END_SRC 

#+RESULTS:
:         Generalized pairwise comparison with 1 prioritized endpoint
: 
:  > statistic       : net chance of a better outcome (delta: endpoint specific, Delta: global) 
:  > null hypothesis : Delta == 0 
:  > groups          : 1 (control) vs. 2 (treatment) 
:  > results
:  endpoint threshold total favorable unfavorable neutral uninf  delta  Delta
:      time        20   100     37.78       46.54      15  0.68 -0.088 -0.088

By default =summary= displays results relative to the statistic "net
chance of a better outcome". To get results for the win ratio set the
argument =statistic= to "winRatio":
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
summary(BT, statistic = "winRatio")
#+END_SRC

#+RESULTS:
:         Generalized pairwise comparison with 1 prioritized endpoint
: 
:  > statistic       : win ratio (delta: endpoint specific, Delta: global) 
:  > null hypothesis : Delta == 1 
:  > groups          : 1 (control) vs. 2 (treatment) 
:  > results
:  endpoint threshold total favorable unfavorable neutral uninf delta Delta
:      time        20   100     37.78       46.54      15  0.68 0.812 0.812

#+RESULTS:
Since we have set the argument =n.permutation= to 0 (i.e. no
permutation test) in the stratified analysis, we do not get confidence
intervals or p.values when calling the =summary= method:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
summary(BT2)
#+END_SRC

#+RESULTS:
#+begin_example
        Generalized pairwise comparison with 2 prioritized endpoints and 4 strata

 > statistic       : net chance of a better outcome (delta: endpoint specific, Delta: global) 
 > null hypothesis : Delta == 0 
 > groups          : 1 (control) vs. 2 (treatment) 
 > results
 endpoint threshold    strata  total favorable unfavorable neutral uninf  delta  Delta
     time        20    global 100.00     36.06       45.77   16.92  1.25 -0.097 -0.097
                     squamous  25.38     14.33        8.77    2.03  0.25  0.056       
                    smallcell  45.69     12.69       20.88   11.25  0.86 -0.082       
                        adeno  13.71      4.74        6.15    2.71  0.11 -0.014       
                        large  15.23      4.30        9.97    0.93  0.03 -0.057       
    karno     1e-12    global  18.17      6.72        8.07    3.38  0.00 -0.014 -0.111
                     squamous   2.28      0.76        0.94    0.59  0.00 -0.002       
                    smallcell  12.12      4.33        5.75    2.03  0.00 -0.014       
                        adeno   2.81      1.46        0.85    0.51  0.00  0.006       
                        large   0.96      0.17        0.54    0.25  0.00 -0.004
#+end_example

*** What about p-value and confidence intervals?

For now computation of p-values and confidence intervals can only be
obtain via a permutation test:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
BT.perm <- BuyseTest(trt ~ tte(time, threshold = 20, censoring = "status"),
                     data = veteran, trace = 0, method.inference = "permutation",
                     n.resampling = 10) 
summary(BT.perm)
#+END_SRC

#+RESULTS:
:         Generalized pairwise comparison with 1 prioritized endpoint
: 
:  > statistic       : net chance of a better outcome (delta: endpoint specific, Delta: global) 
:  > null hypothesis : Delta == 0 
:  > permutation test: 10 samples, confidence level 0.95 
:  > groups          : 1 (control) vs. 2 (treatment) 
:  > results
:  endpoint threshold total favorable unfavorable neutral uninf  delta  Delta CI [2.5 ; 97.5] p.value 
:      time        20   100     37.78       46.54      15  0.68 -0.088 -0.088 [-0.207;-0.016]     0.3

The argument =n.resampling= indicates the permutation that will be
performed. We set it to 10 to save computation time but to obtain
reliable p-value/confidence intervals, =n.resampling= should be at
least 1000.

*** What if smaller is better?
By default =BuyseTest= will always assume that higher values of an
endpoint are favorable. This behavior can be changed by specifying =operator = "<0"=
for an endpoint:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
BTinv <- BuyseTest(trt ~ tte(time, threshold = 20, censoring = "status", operator = "<0"),
                   data = veteran, method.inference = "none", trace = 0)
BTinv
#+END_SRC

#+RESULTS:
:  endpoint threshold delta Delta
:      time        20 0.084 0.084

Internally =BuyseTest= will multiply by -1 the values of the endpoint
to ensure that lower values are considered as favorable. A direct
consequence is that =BuyseTest= will not accept an endpoint with
different operators:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
try(BuyseTest(trt ~ tte(time, threshold = 20, censoring = "status", operator = "<0") + tte(time, 10, "status", ">0"),
              data = veteran, method.inference = "none", trace = 0))
#+END_SRC

#+RESULTS:
: Error in (function (alternative, name.call, censoring, correctionTTE,  : 
:   Cannot have different operator for the same endpoint used at different priorities

*** Stopping comparison for neutral pairs
In presence of neutral pairs, =BuyseTest= will, by default, continue
the comparison on the endpoints with lower priority. For instance let
consider a dataset with one observation in each treatment arm:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
dt.sim <- data.table(Id = 1:2,
                     treatment = c("Yes","No"),
                     tumor = c("Yes","Yes"),
                     size = c(15,20))
dt.sim
#+END_SRC

#+RESULTS:
:    Id treatment tumor size
: 1:  1       Yes   Yes   15
: 2:  2        No   Yes   20

If we perform we GPC with tumor as the first endpoint and size as the
second endpoint:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
BT.pair <- BuyseTest(treatment ~ bin(tumor) + cont(size, operator = "<0"), data = dt.sim,
                     trace = 0, method.inference = "none")
summary(BT.pair)
#+END_SRC

#+RESULTS:
:         Generalized pairwise comparison with 2 prioritized endpoints
: 
:  > statistic       : net chance of a better outcome (delta: endpoint specific, Delta: global) 
:  > null hypothesis : Delta == 0 
:  > groups          : No (control) vs. Yes (treatment) 
:  > results
:  endpoint threshold total favorable unfavorable neutral uninf delta Delta
:     tumor       0.5   100         0           0     100     0     0     0
:      size     1e-12   100       100           0       0     0     1     1

the outcome of the comparison is neutral for the first priority, but
favorable for the second priority. If we set the argument
=neutral.as.uninf= to =FALSE=, =BuyseTest= will stop the comparison
when a pair is classified as neutral:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
BT.pair2 <- BuyseTest(treatment ~ bin(tumor) + cont(size, operator = "<0"), data = dt.sim,
                     trace = 0, method.inference = "none", neutral.as.uninf = FALSE)
summary(BT.pair2)
#+END_SRC

#+RESULTS:
:         Generalized pairwise comparison with 2 prioritized endpoints
: 
:  > statistic       : net chance of a better outcome (delta: endpoint specific, Delta: global) 
:  > null hypothesis : Delta == 0 
:  > groups          : No (control) vs. Yes (treatment) 
:  > results
:  endpoint threshold total favorable unfavorable neutral uninf delta Delta
:     tumor       0.5   100         0           0     100     0     0     0
:      size     1e-12     0         0           0       0     0     0     0
So in this case no pair is analyzed at second priority.

*** Keeping track of all the comparisons
To keep track of all the comparisons that have been performed, for
each endpoint, between the all the pairs of observations from the two
groups set the argument =keep.comparison= to =TRUE=:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
BT.keep <- BuyseTest(trt ~ tte(time, threshold = 20, censoring = "status") + cont(karno),
                     data = veteran, keep.comparison = TRUE, 
                     trace = 0, method.inference = "none")
#+END_SRC

#+RESULTS:

This will store an list of matrices, one for each endpoint, in the
object at the slot =tableComparison=:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
lapply(BT.keep@tableComparison, dim)
#+END_SRC

#+RESULTS:
: $time_20
: [1] 4692    9
: 
: $`karno_1e-12`
: [1] 940   9

The names of the list correspond to the endpoint underscore the
threshold. We can now inspect the first element:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
BT.keep@tableComparison[[1]][c(1:2,90:91),]
#+END_SRC

#+RESULTS:
:    strata index.2 index.1 indexWithinStrata.2 indexWithinStrata.1 favorable unfavorable neutral uninformative
: 1       1      70       1                   1                   1         1   0.0000000       0    0.00000000
: 2       1      70       2                   1                   2         1   0.0000000       0    0.00000000
: 90      1      71      21                   2                  21         0   0.9166667       0    0.08333333
: 91      1      71      22                   2                  22         0   0.6950827       0    0.30491728

Each line corresponds to different comparison between a pair from the
control arm and the treatment arm. The column =strata= store to which
strata the pair belongs (first, second, ...). The last 4 columns
contains the result of the comparison, e.g. the first pair was
classified as favorable while the last was classified as unfavorable
with a weight of 0.695 and as informative with a weight of 0.305.  The
second and third columns indicates the rows in the original dataset
corresponding to the pair:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
veteran[c(70,71,1:2,21:22),]
#+END_SRC

#+RESULTS:
:    trt  celltype time status karno diagtime age prior
: 70   2  squamous  999      1    90       12  54    10
: 71   2  squamous  112      1    80        6  60     0
: 1    1  squamous   72      1    60        7  69     0
: 2    1  squamous  411      1    70        5  64    10
: 21   1 smallcell  123      0    40        3  55     0
: 22   1 smallcell   97      0    60        5  67     0


For the first pair, the event was observed for both observations and
since 999 > 72 + 20 the pair is rated favorable. For the last pair,
the event time of the observation from the control group was censored
at 97. The event time was observed for the observation from treatment
group at 112. Since an event can occur before the censoring time and
112 - 20 < 97 the pair is not favorable. We now need to compute the
survival in the control arm to go further:
#+BEGIN_SRC R :exports both :results output :session *R* :cache n
e.KM <- prodlim(Hist(time,status)~trt, data = veteran)
iSurv <- predict(e.KM, times = c(97,112+20), newdata = data.frame(trt = 1))[[1]]
iSurv
#+END_SRC

#+RESULTS:
: [1] 0.5171924 0.3594915

So the probability of experiencing the event before 112+20 conditional
on being event free up to 97 is:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
(iSurv[1]-iSurv[2])/iSurv[1]
#+END_SRC

#+RESULTS:
: [1] 0.3049173
This corresponds to the rating of the pair as uninformative. The rest
of the weight, 1-0.3049173, will be transferred to the unfavorable
category.

We can then follow what has happened to the pair (71,22) with the
next endpoint:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
dt.tempo <- as.data.table(BT.keep@tableComparison[[2]])
dt.tempo[index.2==71 & index.1==22]
#+END_SRC

#+RESULTS:
:    strata index.2 index.1 indexWithinStrata.2 indexWithinStrata.1 favorable unfavorable neutral uninformative
: 1:      1      71      22                   2                  22 0.3049173           0       0             0

Since 80 > 60, the rest of the weight relative to the pair is
transferred to the favorable category.

** Modifying default options
The =BuyseTest.options= method enable to set the default options of
the =BuyseTest= function. Initially the default options are:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
BuyseTest.options()
#+END_SRC

#+RESULTS:
#+begin_example
$check
[1] TRUE

$conf.level
[1] 0.95

$cpus
[1] 1

$method
[1] "Peron"

$correctionTTE
[1] FALSE

$method.inference
[1] "permutation"

$n.resampling
[1] 1000

$neutral.as.uninf
[1] TRUE

$keep.comparison
[1] FALSE

$trace
[1] 3

$seed
[1] 10

$statistic
[1] "netChance"
#+end_example

The following code enables to change =trace= to 0:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
BuyseTest.options(trace = 0)
#+END_SRC

#+RESULTS:

To restore the original default options do:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
BuyseTest.options(reinitialise = TRUE)
#+END_SRC

#+RESULTS:

 

** BuysePower: TO BE DONE
** seBuyseTest: TO BE DONE

* Information about the R session used for this document

#+BEGIN_SRC R :exports both :results output :session *R* :cache no
sessionInfo()
#+END_SRC

#+RESULTS:
#+begin_example
R version 3.4.0 (2017-04-21)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 7 x64 (build 7601) Service Pack 1

Matrix products: default

locale:
[1] LC_COLLATE=Danish_Denmark.1252  LC_CTYPE=Danish_Denmark.1252    LC_MONETARY=Danish_Denmark.1252 LC_NUMERIC=C                   
[5] LC_TIME=Danish_Denmark.1252    

attached base packages:
[1] stats4    parallel  stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
 [1] BuyseTest_1.3       sandwich_2.4-0      reshape2_1.4.3      nlme_3.1-131        multcomp_1.4-8      TH.data_1.0-8       mvtnorm_1.0-7      
 [8] Matrix_1.2-9        MASS_7.3-47         ggplot2_2.2.1       spelling_1.1        roxygen2_6.0.1      butils.base_1.1     XML_3.98-1.7       
[15] selectr_0.3-1       devtools_1.13.2     survival_2.41-3     pbapply_1.3-3       testthat_2.0.0      snowfall_1.84-6.1   data.table_1.10.4-3
[22] Rcpp_0.12.16        prodlim_1.6.1       lava_1.6.1          doSNOW_1.0.14       snow_0.4-2          iterators_1.0.8     foreach_1.4.4      

loaded via a namespace (and not attached):
 [1] zoo_1.8-0                 splines_3.4.0             lattice_0.20-35           colorspace_1.3-2          rlang_0.1.1               withr_2.1.2              
 [7] plyr_1.8.4                stringr_1.2.0             munsell_0.4.3             commonmark_1.2            gtable_0.2.0              rvest_0.3.2              
[13] codetools_0.2-15          memoise_1.1.0             RcppArmadillo_0.8.400.0.0 doParallel_1.0.11         backports_1.1.0           scales_0.4.1             
[19] pipeR_0.6.1.3             desc_1.1.0                digest_0.6.12             stringi_1.1.5             grid_3.4.0                rprojroot_1.2            
[25] tools_3.4.0               magrittr_1.5              lazyeval_0.2.0            tibble_1.3.3              crayon_1.3.4              xml2_1.1.1               
[31] assertthat_0.2.0          httr_1.2.1                R6_2.2.1                  compiler_3.4.0
#+end_example


