// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// GPC_cpp
List GPC_cpp(const arma::mat& endpoint, const arma::mat& censoring, const std::vector< arma::uvec >& indexC, const std::vector< arma::uvec >& indexT, const NumericVector& threshold, const IntegerVector& method, unsigned int D, int n_strata, int n_TTE, const arma::mat& Wscheme, const IntegerVector& index_survival_M1, const NumericVector& threshold_M1, const std::vector< std::vector< arma::mat > >& list_survTimeC, const std::vector< std::vector< arma::mat > >& list_survTimeT, const std::vector< std::vector< arma::mat > >& list_survJumpC, const std::vector< std::vector< arma::mat > >& list_survJumpT, const std::vector< arma::mat >& list_lastSurv, int correctionUninf, bool neutralAsUninf, bool keepScore, bool reserve, bool returnOnlyDelta);
RcppExport SEXP _BuyseTest_GPC_cpp(SEXP endpointSEXP, SEXP censoringSEXP, SEXP indexCSEXP, SEXP indexTSEXP, SEXP thresholdSEXP, SEXP methodSEXP, SEXP DSEXP, SEXP n_strataSEXP, SEXP n_TTESEXP, SEXP WschemeSEXP, SEXP index_survival_M1SEXP, SEXP threshold_M1SEXP, SEXP list_survTimeCSEXP, SEXP list_survTimeTSEXP, SEXP list_survJumpCSEXP, SEXP list_survJumpTSEXP, SEXP list_lastSurvSEXP, SEXP correctionUninfSEXP, SEXP neutralAsUninfSEXP, SEXP keepScoreSEXP, SEXP reserveSEXP, SEXP returnOnlyDeltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type endpoint(endpointSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type censoring(censoringSEXP);
    Rcpp::traits::input_parameter< const std::vector< arma::uvec >& >::type indexC(indexCSEXP);
    Rcpp::traits::input_parameter< const std::vector< arma::uvec >& >::type indexT(indexTSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type D(DSEXP);
    Rcpp::traits::input_parameter< int >::type n_strata(n_strataSEXP);
    Rcpp::traits::input_parameter< int >::type n_TTE(n_TTESEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Wscheme(WschemeSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type index_survival_M1(index_survival_M1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type threshold_M1(threshold_M1SEXP);
    Rcpp::traits::input_parameter< const std::vector< std::vector< arma::mat > >& >::type list_survTimeC(list_survTimeCSEXP);
    Rcpp::traits::input_parameter< const std::vector< std::vector< arma::mat > >& >::type list_survTimeT(list_survTimeTSEXP);
    Rcpp::traits::input_parameter< const std::vector< std::vector< arma::mat > >& >::type list_survJumpC(list_survJumpCSEXP);
    Rcpp::traits::input_parameter< const std::vector< std::vector< arma::mat > >& >::type list_survJumpT(list_survJumpTSEXP);
    Rcpp::traits::input_parameter< const std::vector< arma::mat >& >::type list_lastSurv(list_lastSurvSEXP);
    Rcpp::traits::input_parameter< int >::type correctionUninf(correctionUninfSEXP);
    Rcpp::traits::input_parameter< bool >::type neutralAsUninf(neutralAsUninfSEXP);
    Rcpp::traits::input_parameter< bool >::type keepScore(keepScoreSEXP);
    Rcpp::traits::input_parameter< bool >::type reserve(reserveSEXP);
    Rcpp::traits::input_parameter< bool >::type returnOnlyDelta(returnOnlyDeltaSEXP);
    rcpp_result_gen = Rcpp::wrap(GPC_cpp(endpoint, censoring, indexC, indexT, threshold, method, D, n_strata, n_TTE, Wscheme, index_survival_M1, threshold_M1, list_survTimeC, list_survTimeT, list_survJumpC, list_survJumpT, list_lastSurv, correctionUninf, neutralAsUninf, keepScore, reserve, returnOnlyDelta));
    return rcpp_result_gen;
END_RCPP
}
// calcIntegralScore_cpp
double calcIntegralScore_cpp(const arma::mat& survival, double start);
RcppExport SEXP _BuyseTest_calcIntegralScore_cpp(SEXP survivalSEXP, SEXP startSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type survival(survivalSEXP);
    Rcpp::traits::input_parameter< double >::type start(startSEXP);
    rcpp_result_gen = Rcpp::wrap(calcIntegralScore_cpp(survival, start));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BuyseTest_GPC_cpp", (DL_FUNC) &_BuyseTest_GPC_cpp, 22},
    {"_BuyseTest_calcIntegralScore_cpp", (DL_FUNC) &_BuyseTest_calcIntegralScore_cpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_BuyseTest(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
